
4btn_4led_ATmega4080.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  000002b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000026ff  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000238b  00000000  00000000  00002a53  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033e  00000000  00000000  00004dde  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  0000511c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000011e7  00000000  00000000  00005184  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000088  00000000  00000000  0000636b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000063f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  80:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  88:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  8c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  90:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  94:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  98:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  9c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	df e3       	ldi	r29, 0x3F	; 63
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	0e 94 28 01 	call	0x250	; 0x250 <main>
  b0:	0c 94 2d 01 	jmp	0x25a	; 0x25a <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <_Z5setupv>:

#include <avr/io.h>

void setup() {
  // input D4,D5,C6,B2
  PORTD.DIR &= ~(0b1 << 4);
  b8:	e0 e6       	ldi	r30, 0x60	; 96
  ba:	f4 e0       	ldi	r31, 0x04	; 4
  bc:	80 81       	ld	r24, Z
  be:	8f 7e       	andi	r24, 0xEF	; 239
  c0:	80 83       	st	Z, r24
  PORTD.DIR &= ~(0b1 << 5);
  c2:	80 81       	ld	r24, Z
  c4:	8f 7d       	andi	r24, 0xDF	; 223
  c6:	80 83       	st	Z, r24
  PORTC.DIR &= ~(0b1 << 6);
  c8:	e0 e4       	ldi	r30, 0x40	; 64
  ca:	f4 e0       	ldi	r31, 0x04	; 4
  cc:	80 81       	ld	r24, Z
  ce:	8f 7b       	andi	r24, 0xBF	; 191
  d0:	80 83       	st	Z, r24
  PORTB.DIR &= ~(0b1 << 2);
  d2:	e0 e2       	ldi	r30, 0x20	; 32
  d4:	f4 e0       	ldi	r31, 0x04	; 4
  d6:	80 81       	ld	r24, Z
  d8:	8b 7f       	andi	r24, 0xFB	; 251
  da:	80 83       	st	Z, r24
  // output F4,A1,E3,B0
  PORTF.DIR |= (0b1 << 4); 
  dc:	a0 ea       	ldi	r26, 0xA0	; 160
  de:	b4 e0       	ldi	r27, 0x04	; 4
  e0:	8c 91       	ld	r24, X
  e2:	80 61       	ori	r24, 0x10	; 16
  e4:	8c 93       	st	X, r24
  PORTA.DIR |= (0b1 << 1);
  e6:	a0 e0       	ldi	r26, 0x00	; 0
  e8:	b4 e0       	ldi	r27, 0x04	; 4
  ea:	8c 91       	ld	r24, X
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	8c 93       	st	X, r24
  PORTE.DIR |= (0b1 << 3);
  f0:	a0 e8       	ldi	r26, 0x80	; 128
  f2:	b4 e0       	ldi	r27, 0x04	; 4
  f4:	8c 91       	ld	r24, X
  f6:	88 60       	ori	r24, 0x08	; 8
  f8:	8c 93       	st	X, r24
  PORTB.DIR |= (0b1 << 0);
  fa:	80 81       	ld	r24, Z
  fc:	81 60       	ori	r24, 0x01	; 1
  fe:	80 83       	st	Z, r24
 100:	08 95       	ret

00000102 <_Z4loopv>:
}

void loop() {
 102:	cf 92       	push	r12
 104:	df 92       	push	r13
 106:	ff 92       	push	r15
 108:	0f 93       	push	r16
 10a:	1f 93       	push	r17
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
  int states = 
    ((PORTD.IN >> 4) & 0b1) << 3 |
 110:	c0 e6       	ldi	r28, 0x60	; 96
 112:	d4 e0       	ldi	r29, 0x04	; 4
 114:	18 85       	ldd	r17, Y+8	; 0x08
 116:	14 fb       	bst	r17, 4
 118:	aa 27       	eor	r26, r26
 11a:	a0 f9       	bld	r26, 0
 11c:	b0 e0       	ldi	r27, 0x00	; 0
 11e:	aa 0f       	add	r26, r26
 120:	bb 1f       	adc	r27, r27
 122:	aa 0f       	add	r26, r26
 124:	bb 1f       	adc	r27, r27
 126:	aa 0f       	add	r26, r26
 128:	bb 1f       	adc	r27, r27
    ((PORTD.IN >> 5) & 0b1) << 2 |
 12a:	c8 85       	ldd	r28, Y+8	; 0x08
 12c:	c5 fb       	bst	r28, 5
 12e:	ee 27       	eor	r30, r30
 130:	e0 f9       	bld	r30, 0
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	ee 0f       	add	r30, r30
 136:	ff 1f       	adc	r31, r31
 138:	ee 0f       	add	r30, r30
 13a:	ff 1f       	adc	r31, r31
  PORTB.DIR |= (0b1 << 0);
}

void loop() {
  int states = 
    ((PORTD.IN >> 4) & 0b1) << 3 |
 13c:	ea 2b       	or	r30, r26
 13e:	fb 2b       	or	r31, r27
    ((PORTD.IN >> 5) & 0b1) << 2 |
    ((PORTC.IN >> 6) & 0b1) << 1 |
 140:	a0 91 48 04 	lds	r26, 0x0448	; 0x800448 <__TEXT_REGION_LENGTH__+0x7f4448>
 144:	a6 fb       	bst	r26, 6
 146:	22 27       	eor	r18, r18
 148:	20 f9       	bld	r18, 0
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	22 0f       	add	r18, r18
 14e:	33 1f       	adc	r19, r19
}

void loop() {
  int states = 
    ((PORTD.IN >> 4) & 0b1) << 3 |
    ((PORTD.IN >> 5) & 0b1) << 2 |
 150:	2e 2b       	or	r18, r30
 152:	3f 2b       	or	r19, r31
    ((PORTC.IN >> 6) & 0b1) << 1 |
    ((PORTB.IN >> 2) & 0b1) << 0;
 154:	e0 e2       	ldi	r30, 0x20	; 32
 156:	f4 e0       	ldi	r31, 0x04	; 4
 158:	a0 85       	ldd	r26, Z+8	; 0x08
 15a:	a2 fb       	bst	r26, 2
 15c:	88 27       	eor	r24, r24
 15e:	80 f9       	bld	r24, 0
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	82 2b       	or	r24, r18
 164:	93 2b       	or	r25, r19

  
  // Drive Led pins low if corresponding state is 0
  PORTF.OUT &= ~(((~states >> 3) & 0b1) << 4);
 166:	00 ea       	ldi	r16, 0xA0	; 160
 168:	14 e0       	ldi	r17, 0x04	; 4
 16a:	d8 01       	movw	r26, r16
 16c:	14 96       	adiw	r26, 0x04	; 4
 16e:	cc 91       	ld	r28, X
 170:	9c 01       	movw	r18, r24
 172:	20 95       	com	r18
 174:	30 95       	com	r19
 176:	d9 01       	movw	r26, r18
 178:	b5 95       	asr	r27
 17a:	a7 95       	ror	r26
 17c:	b5 95       	asr	r27
 17e:	a7 95       	ror	r26
 180:	b5 95       	asr	r27
 182:	a7 95       	ror	r26
 184:	a1 70       	andi	r26, 0x01	; 1
 186:	a2 95       	swap	r26
 188:	a0 7f       	andi	r26, 0xF0	; 240
 18a:	a0 95       	com	r26
 18c:	ac 23       	and	r26, r28
 18e:	e8 01       	movw	r28, r16
 190:	ac 83       	std	Y+4, r26	; 0x04
  PORTA.OUT &= ~(((~states >> 2) & 0b1) << 1);
 192:	c0 e0       	ldi	r28, 0x00	; 0
 194:	d4 e0       	ldi	r29, 0x04	; 4
 196:	fc 80       	ldd	r15, Y+4	; 0x04
 198:	d9 01       	movw	r26, r18
 19a:	b5 95       	asr	r27
 19c:	a7 95       	ror	r26
 19e:	b5 95       	asr	r27
 1a0:	a7 95       	ror	r26
 1a2:	a1 70       	andi	r26, 0x01	; 1
 1a4:	aa 0f       	add	r26, r26
 1a6:	a0 95       	com	r26
 1a8:	af 21       	and	r26, r15
 1aa:	ac 83       	std	Y+4, r26	; 0x04
  PORTE.OUT &= ~(((~states >> 1) & 0b1) << 3);
 1ac:	68 94       	set
 1ae:	cc 24       	eor	r12, r12
 1b0:	c7 f8       	bld	r12, 7
 1b2:	dd 24       	eor	r13, r13
 1b4:	d2 f8       	bld	r13, 2
 1b6:	d6 01       	movw	r26, r12
 1b8:	14 96       	adiw	r26, 0x04	; 4
 1ba:	fc 90       	ld	r15, X
 1bc:	14 97       	sbiw	r26, 0x04	; 4
 1be:	35 95       	asr	r19
 1c0:	27 95       	ror	r18
 1c2:	21 70       	andi	r18, 0x01	; 1
 1c4:	22 0f       	add	r18, r18
 1c6:	22 0f       	add	r18, r18
 1c8:	22 0f       	add	r18, r18
 1ca:	20 95       	com	r18
 1cc:	2f 21       	and	r18, r15
 1ce:	14 96       	adiw	r26, 0x04	; 4
 1d0:	2c 93       	st	X, r18
  PORTB.OUT &= ~(((~states >> 0) & 0b1) << 0);
 1d2:	f4 80       	ldd	r15, Z+4	; 0x04
 1d4:	9c 01       	movw	r18, r24
 1d6:	b1 e0       	ldi	r27, 0x01	; 1
 1d8:	2b 27       	eor	r18, r27
 1da:	21 70       	andi	r18, 0x01	; 1
 1dc:	20 95       	com	r18
 1de:	2f 21       	and	r18, r15
 1e0:	24 83       	std	Z+4, r18	; 0x04
  
  // Drive Led pins high if corresponding state is 1
  PORTF.OUT |= ((states >> 3) & 0b1) << 4;
 1e2:	d8 01       	movw	r26, r16
 1e4:	14 96       	adiw	r26, 0x04	; 4
 1e6:	fc 90       	ld	r15, X
 1e8:	14 97       	sbiw	r26, 0x04	; 4
 1ea:	9c 01       	movw	r18, r24
 1ec:	36 95       	lsr	r19
 1ee:	27 95       	ror	r18
 1f0:	36 95       	lsr	r19
 1f2:	27 95       	ror	r18
 1f4:	36 95       	lsr	r19
 1f6:	27 95       	ror	r18
 1f8:	22 95       	swap	r18
 1fa:	32 95       	swap	r19
 1fc:	30 7f       	andi	r19, 0xF0	; 240
 1fe:	32 27       	eor	r19, r18
 200:	20 7f       	andi	r18, 0xF0	; 240
 202:	32 27       	eor	r19, r18
 204:	2f 29       	or	r18, r15
 206:	14 96       	adiw	r26, 0x04	; 4
 208:	2c 93       	st	X, r18
  PORTA.OUT |= ((states >> 2) & 0b1) << 1;
 20a:	9c 81       	ldd	r25, Y+4	; 0x04
 20c:	82 fb       	bst	r24, 2
 20e:	66 27       	eor	r22, r22
 210:	60 f9       	bld	r22, 0
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	66 0f       	add	r22, r22
 216:	77 1f       	adc	r23, r23
 218:	69 2b       	or	r22, r25
 21a:	6c 83       	std	Y+4, r22	; 0x04
  PORTE.OUT |= ((states >> 1) & 0b1) << 3;
 21c:	e6 01       	movw	r28, r12
 21e:	9c 81       	ldd	r25, Y+4	; 0x04
 220:	81 fb       	bst	r24, 1
 222:	44 27       	eor	r20, r20
 224:	40 f9       	bld	r20, 0
 226:	50 e0       	ldi	r21, 0x00	; 0
 228:	44 0f       	add	r20, r20
 22a:	55 1f       	adc	r21, r21
 22c:	44 0f       	add	r20, r20
 22e:	55 1f       	adc	r21, r21
 230:	44 0f       	add	r20, r20
 232:	55 1f       	adc	r21, r21
 234:	49 2b       	or	r20, r25
 236:	4c 83       	std	Y+4, r20	; 0x04
  PORTB.OUT |= ((states >> 0) & 0b1) << 0;
 238:	94 81       	ldd	r25, Z+4	; 0x04
 23a:	81 70       	andi	r24, 0x01	; 1
 23c:	89 2b       	or	r24, r25
 23e:	84 83       	std	Z+4, r24	; 0x04
}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	ff 90       	pop	r15
 24a:	df 90       	pop	r13
 24c:	cf 90       	pop	r12
 24e:	08 95       	ret

00000250 <main>:

int main(void)
{
    /* Replace with your application code */
    setup();
 250:	0e 94 5c 00 	call	0xb8	; 0xb8 <_Z5setupv>
	while (1) 
    {
		loop();
 254:	0e 94 81 00 	call	0x102	; 0x102 <_Z4loopv>
 258:	fd cf       	rjmp	.-6      	; 0x254 <main+0x4>

0000025a <_exit>:
 25a:	f8 94       	cli

0000025c <__stop_program>:
 25c:	ff cf       	rjmp	.-2      	; 0x25c <__stop_program>
