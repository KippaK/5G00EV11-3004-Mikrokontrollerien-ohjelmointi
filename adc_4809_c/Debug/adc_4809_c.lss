
adc_4809_c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  0000027e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000027e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002a89  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002441  00000000  00000000  00002db1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000364  00000000  00000000  000051f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00005558  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001538  00000000  00000000  000055cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000dd  00000000  00000000  00006b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00006be1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  80:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  88:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  8c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  90:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  94:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  98:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  9c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	df e3       	ldi	r29, 0x3F	; 63
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <main>
  b0:	0c 94 13 01 	jmp	0x226	; 0x226 <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <ADC_init>:
#define ADC_CHANNEL 0  // Using AIN0 as the input

// Function to initialize the ADC
void ADC_init(void) {
	// Set the reference voltage to 2.5V (or change as needed)
	VREF.CTRLA |= VREF_ADC0REFSEL_4V34_gc;
  b8:	e0 ea       	ldi	r30, 0xA0	; 160
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	80 63       	ori	r24, 0x30	; 48
  c0:	80 83       	st	Z, r24

	// Set the ADC prescaler to divide the clock by 4 for desired speed
	ADC0.CTRLC = ADC_PRESC_DIV2_gc;
  c2:	e0 e0       	ldi	r30, 0x00	; 0
  c4:	f6 e0       	ldi	r31, 0x06	; 6
  c6:	12 82       	std	Z+2, r1	; 0x02
	
	// Select the input channel (e.g., AIN0)
	ADC0.MUXPOS = ADC_MUXPOS_AIN0_gc + ADC_CHANNEL;
  c8:	16 82       	std	Z+6, r1	; 0x06

	// Enable the ADC
	ADC0.CTRLA = ADC_ENABLE_bm;
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	80 83       	st	Z, r24
  ce:	08 95       	ret

000000d0 <ADC_read>:
}

// Function to read the ADC value
uint16_t ADC_read(void) {
	// Start a conversion
	ADC0.COMMAND = ADC_STCONV_bm;
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f4608>

	// Wait for the conversion to complete
	while (!(ADC0.INTFLAGS & ADC_RESRDY_bm));
  d6:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
  da:	80 ff       	sbrs	r24, 0
  dc:	fc cf       	rjmp	.-8      	; 0xd6 <ADC_read+0x6>

	// Clear the interrupt flag
	ADC0.INTFLAGS |= ADC_RESRDY_bm;
  de:	e0 e0       	ldi	r30, 0x00	; 0
  e0:	f6 e0       	ldi	r31, 0x06	; 6
  e2:	83 85       	ldd	r24, Z+11	; 0x0b
  e4:	81 60       	ori	r24, 0x01	; 1
  e6:	83 87       	std	Z+11, r24	; 0x0b

	// Return the ADC result
	return ADC0.RES;
  e8:	80 89       	ldd	r24, Z+16	; 0x10
  ea:	91 89       	ldd	r25, Z+17	; 0x11
}
  ec:	08 95       	ret

000000ee <drive_leds>:

void drive_leds(uint8_t val) {
  ee:	ef 92       	push	r14
  f0:	ff 92       	push	r15
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
	uint8_t states = val >> 4;
  fa:	18 2f       	mov	r17, r24
  fc:	12 95       	swap	r17
  fe:	1f 70       	andi	r17, 0x0F	; 15
	PORTF.OUT &= ~(((~states >> 3) & 0b1) << 4);
 100:	c0 ea       	ldi	r28, 0xA0	; 160
 102:	d4 e0       	ldi	r29, 0x04	; 4
 104:	9c 81       	ldd	r25, Y+4	; 0x04
 106:	21 2f       	mov	r18, r17
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	20 95       	com	r18
 10c:	30 95       	com	r19
 10e:	f9 01       	movw	r30, r18
 110:	f5 95       	asr	r31
 112:	e7 95       	ror	r30
 114:	f5 95       	asr	r31
 116:	e7 95       	ror	r30
 118:	f5 95       	asr	r31
 11a:	e7 95       	ror	r30
 11c:	e1 70       	andi	r30, 0x01	; 1
 11e:	e2 95       	swap	r30
 120:	e0 7f       	andi	r30, 0xF0	; 240
 122:	e0 95       	com	r30
 124:	e9 23       	and	r30, r25
 126:	ec 83       	std	Y+4, r30	; 0x04
	PORTA.OUT &= ~(((~states >> 2) & 0b1) << 1);
 128:	a0 e0       	ldi	r26, 0x00	; 0
 12a:	b4 e0       	ldi	r27, 0x04	; 4
 12c:	14 96       	adiw	r26, 0x04	; 4
 12e:	9c 91       	ld	r25, X
 130:	14 97       	sbiw	r26, 0x04	; 4
 132:	f9 01       	movw	r30, r18
 134:	f5 95       	asr	r31
 136:	e7 95       	ror	r30
 138:	f5 95       	asr	r31
 13a:	e7 95       	ror	r30
 13c:	e1 70       	andi	r30, 0x01	; 1
 13e:	ee 0f       	add	r30, r30
 140:	e0 95       	com	r30
 142:	e9 23       	and	r30, r25
 144:	14 96       	adiw	r26, 0x04	; 4
 146:	ec 93       	st	X, r30
 148:	14 97       	sbiw	r26, 0x04	; 4
	PORTE.OUT &= ~(((~states >> 1) & 0b1) << 3);
 14a:	68 94       	set
 14c:	ee 24       	eor	r14, r14
 14e:	e7 f8       	bld	r14, 7
 150:	ff 24       	eor	r15, r15
 152:	f2 f8       	bld	r15, 2
 154:	f7 01       	movw	r30, r14
 156:	94 81       	ldd	r25, Z+4	; 0x04
 158:	35 95       	asr	r19
 15a:	27 95       	ror	r18
 15c:	21 70       	andi	r18, 0x01	; 1
 15e:	22 0f       	add	r18, r18
 160:	22 0f       	add	r18, r18
 162:	22 0f       	add	r18, r18
 164:	20 95       	com	r18
 166:	29 23       	and	r18, r25
 168:	24 83       	std	Z+4, r18	; 0x04
	PORTB.OUT &= ~(((~states >> 0) & 0b1) << 0);
 16a:	20 e2       	ldi	r18, 0x20	; 32
 16c:	34 e0       	ldi	r19, 0x04	; 4
 16e:	f9 01       	movw	r30, r18
 170:	04 81       	ldd	r16, Z+4	; 0x04
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	91 27       	eor	r25, r17
 176:	91 70       	andi	r25, 0x01	; 1
 178:	90 95       	com	r25
 17a:	90 23       	and	r25, r16
 17c:	94 83       	std	Z+4, r25	; 0x04
  
	// Drive Led pins high if corresponding state is 1
	PORTF.OUT |= ((states >> 3) & 0b1) << 4;
 17e:	0c 81       	ldd	r16, Y+4	; 0x04
 180:	98 2f       	mov	r25, r24
 182:	99 1f       	adc	r25, r25
 184:	99 27       	eor	r25, r25
 186:	99 1f       	adc	r25, r25
 188:	89 2f       	mov	r24, r25
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	82 95       	swap	r24
 18e:	92 95       	swap	r25
 190:	90 7f       	andi	r25, 0xF0	; 240
 192:	98 27       	eor	r25, r24
 194:	80 7f       	andi	r24, 0xF0	; 240
 196:	98 27       	eor	r25, r24
 198:	80 2b       	or	r24, r16
 19a:	8c 83       	std	Y+4, r24	; 0x04
	PORTA.OUT |= ((states >> 2) & 0b1) << 1;
 19c:	14 96       	adiw	r26, 0x04	; 4
 19e:	8c 91       	ld	r24, X
 1a0:	14 97       	sbiw	r26, 0x04	; 4
 1a2:	12 fb       	bst	r17, 2
 1a4:	66 27       	eor	r22, r22
 1a6:	60 f9       	bld	r22, 0
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	66 0f       	add	r22, r22
 1ac:	77 1f       	adc	r23, r23
 1ae:	68 2b       	or	r22, r24
 1b0:	14 96       	adiw	r26, 0x04	; 4
 1b2:	6c 93       	st	X, r22
	PORTE.OUT |= ((states >> 1) & 0b1) << 3;
 1b4:	f7 01       	movw	r30, r14
 1b6:	84 81       	ldd	r24, Z+4	; 0x04
 1b8:	11 fb       	bst	r17, 1
 1ba:	44 27       	eor	r20, r20
 1bc:	40 f9       	bld	r20, 0
 1be:	50 e0       	ldi	r21, 0x00	; 0
 1c0:	44 0f       	add	r20, r20
 1c2:	55 1f       	adc	r21, r21
 1c4:	44 0f       	add	r20, r20
 1c6:	55 1f       	adc	r21, r21
 1c8:	44 0f       	add	r20, r20
 1ca:	55 1f       	adc	r21, r21
 1cc:	48 2b       	or	r20, r24
 1ce:	44 83       	std	Z+4, r20	; 0x04
	PORTB.OUT |= ((states >> 0) & 0b1) << 0;
 1d0:	f9 01       	movw	r30, r18
 1d2:	84 81       	ldd	r24, Z+4	; 0x04
 1d4:	11 70       	andi	r17, 0x01	; 1
 1d6:	18 2b       	or	r17, r24
 1d8:	14 83       	std	Z+4, r17	; 0x04
}
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	0f 91       	pop	r16
 1e2:	ff 90       	pop	r15
 1e4:	ef 90       	pop	r14
 1e6:	08 95       	ret

000001e8 <main>:

int main(void) {
	// Initialize the ADC
	ADC_init();
 1e8:	0e 94 5c 00 	call	0xb8	; 0xb8 <ADC_init>
	PORTF.DIR |= (0b1 << 4); 
 1ec:	e0 ea       	ldi	r30, 0xA0	; 160
 1ee:	f4 e0       	ldi	r31, 0x04	; 4
 1f0:	80 81       	ld	r24, Z
 1f2:	80 61       	ori	r24, 0x10	; 16
 1f4:	80 83       	st	Z, r24
	PORTA.DIR |= (0b1 << 1);
 1f6:	e0 e0       	ldi	r30, 0x00	; 0
 1f8:	f4 e0       	ldi	r31, 0x04	; 4
 1fa:	80 81       	ld	r24, Z
 1fc:	82 60       	ori	r24, 0x02	; 2
 1fe:	80 83       	st	Z, r24
	PORTE.DIR |= (0b1 << 3);
 200:	e0 e8       	ldi	r30, 0x80	; 128
 202:	f4 e0       	ldi	r31, 0x04	; 4
 204:	80 81       	ld	r24, Z
 206:	88 60       	ori	r24, 0x08	; 8
 208:	80 83       	st	Z, r24
	PORTB.DIR |= (0b1 << 0);
 20a:	e0 e2       	ldi	r30, 0x20	; 32
 20c:	f4 e0       	ldi	r31, 0x04	; 4
 20e:	80 81       	ld	r24, Z
 210:	81 60       	ori	r24, 0x01	; 1
 212:	80 83       	st	Z, r24
	uint16_t adc_result = 0;
	// Main loop
	while (1) {
		// Read the ADC value
		adc_result = ADC_read();
 214:	0e 94 68 00 	call	0xd0	; 0xd0 <ADC_read>
		adc_result = adc_result >> 2;
 218:	96 95       	lsr	r25
 21a:	87 95       	ror	r24
 21c:	96 95       	lsr	r25
 21e:	87 95       	ror	r24
		drive_leds(adc_result);
 220:	0e 94 77 00 	call	0xee	; 0xee <drive_leds>
 224:	f7 cf       	rjmp	.-18     	; 0x214 <main+0x2c>

00000226 <_exit>:
 226:	f8 94       	cli

00000228 <__stop_program>:
 228:	ff cf       	rjmp	.-2      	; 0x228 <__stop_program>
