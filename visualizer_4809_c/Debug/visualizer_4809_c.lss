
visualizer_4809_c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00000258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000e  000041d6  000001d6  0000024a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000030  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ae5  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002512  00000000  00000000  00002df5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000373  00000000  00000000  00005307  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  0000567c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001497  00000000  00000000  0000570c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c5  00000000  00000000  00006ba3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00006c68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  80:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  88:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  8c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  90:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  94:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  98:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  9c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	df e3       	ldi	r29, 0x3F	; 63
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  b0:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <ADC_init>:
	
	// Set the reference voltage to 2.5V (or change as needed)
	// VREF.CTRLA |= VREF_ADC0REFSEL_4V34_gc;

	// Set the ADC prescaler to divide the clock by 2 for desired speed and reference voltage to VDD
	ADC0.CTRLC = ADC_PRESC_DIV2_gc | VREF_ADC0REFSEL_VDD_gc;
  b8:	e0 e0       	ldi	r30, 0x00	; 0
  ba:	f6 e0       	ldi	r31, 0x06	; 6
  bc:	80 e1       	ldi	r24, 0x10	; 16
  be:	82 83       	std	Z+2, r24	; 0x02
	
	// Select the input channel (e.g., AIN0)
	ADC0.MUXPOS = ADC_MUXPOS_AIN0_gc + ADC_CHANNEL;
  c0:	16 82       	std	Z+6, r1	; 0x06

	// Enable the ADC
	ADC0.CTRLA = ADC_ENABLE_bm;
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	80 83       	st	Z, r24
  c6:	08 95       	ret

000000c8 <uart_send_char>:
}

// Send a single character over UART
void uart_send_char(char c) {
	while (!(USART0.STATUS & USART_DREIF_bm)); // Wait until ready to send
  c8:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <__TEXT_REGION_LENGTH__+0x7f4804>
  cc:	95 ff       	sbrs	r25, 5
  ce:	fc cf       	rjmp	.-8      	; 0xc8 <uart_send_char>
	USART0.TXDATAL = c;
  d0:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__TEXT_REGION_LENGTH__+0x7f4802>
  d4:	08 95       	ret

000000d6 <uart_send_string>:
}

// Send a string over UART
void uart_send_string(const char* str) {
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	ec 01       	movw	r28, r24
	while (*str) {
  dc:	03 c0       	rjmp	.+6      	; 0xe4 <uart_send_string+0xe>
		uart_send_char(*str++);
  de:	21 96       	adiw	r28, 0x01	; 1
  e0:	0e 94 64 00 	call	0xc8	; 0xc8 <uart_send_char>
	USART0.TXDATAL = c;
}

// Send a string over UART
void uart_send_string(const char* str) {
	while (*str) {
  e4:	88 81       	ld	r24, Y
  e6:	81 11       	cpse	r24, r1
  e8:	fa cf       	rjmp	.-12     	; 0xde <uart_send_string+0x8>
		uart_send_char(*str++);
	}
}
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <ADC_read>:

// Function to read the ADC value
uint16_t ADC_read(void) {
	// Start a conversion
	ADC0.COMMAND = ADC_STCONV_bm;
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f4608>

	// Wait for the conversion to complete
	while (!(ADC0.INTFLAGS & ADC_RESRDY_bm));
  f6:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
  fa:	80 ff       	sbrs	r24, 0
  fc:	fc cf       	rjmp	.-8      	; 0xf6 <ADC_read+0x6>

	// Clear the interrupt flag
	ADC0.INTFLAGS |= ADC_RESRDY_bm;
  fe:	e0 e0       	ldi	r30, 0x00	; 0
 100:	f6 e0       	ldi	r31, 0x06	; 6
 102:	83 85       	ldd	r24, Z+11	; 0x0b
 104:	81 60       	ori	r24, 0x01	; 1
 106:	83 87       	std	Z+11, r24	; 0x0b

	// Return the ADC result
	return ADC0.RES;
 108:	80 89       	ldd	r24, Z+16	; 0x10
 10a:	91 89       	ldd	r25, Z+17	; 0x11
}
 10c:	08 95       	ret

0000010e <main>:


int main(void) {
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
 116:	25 97       	sbiw	r28, 0x05	; 5
 118:	cd bf       	out	0x3d, r28	; 61
 11a:	de bf       	out	0x3e, r29	; 62
	// Initialize the ADC
	ADC_init();
 11c:	0e 94 5c 00 	call	0xb8	; 0xb8 <ADC_init>
	uint16_t adc_result = 0;
	char buf[5];
	// Main loop
	while (1) {
		// Read the ADC value
		adc_result = ADC_read();
 120:	0e 94 78 00 	call	0xf0	; 0xf0 <ADC_read>
		adc_result = adc_result >> 2;
		itoa(adc_result, buf, 10);
 124:	4a e0       	ldi	r20, 0x0A	; 10
 126:	50 e0       	ldi	r21, 0x00	; 0
 128:	be 01       	movw	r22, r28
 12a:	6f 5f       	subi	r22, 0xFF	; 255
 12c:	7f 4f       	sbci	r23, 0xFF	; 255
 12e:	96 95       	lsr	r25
 130:	87 95       	ror	r24
 132:	96 95       	lsr	r25
 134:	87 95       	ror	r24
 136:	0e 94 a9 00 	call	0x152	; 0x152 <itoa>
		uart_send_string("ADC result = ");
 13a:	86 ed       	ldi	r24, 0xD6	; 214
 13c:	91 e4       	ldi	r25, 0x41	; 65
 13e:	0e 94 6b 00 	call	0xd6	; 0xd6 <uart_send_string>
		uart_send_string(buf);
 142:	ce 01       	movw	r24, r28
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	0e 94 6b 00 	call	0xd6	; 0xd6 <uart_send_string>
		uart_send_char('\n');
 14a:	8a e0       	ldi	r24, 0x0A	; 10
 14c:	0e 94 64 00 	call	0xc8	; 0xc8 <uart_send_char>
 150:	e7 cf       	rjmp	.-50     	; 0x120 <main+0x12>

00000152 <itoa>:
 152:	45 32       	cpi	r20, 0x25	; 37
 154:	51 05       	cpc	r21, r1
 156:	20 f4       	brcc	.+8      	; 0x160 <itoa+0xe>
 158:	42 30       	cpi	r20, 0x02	; 2
 15a:	10 f0       	brcs	.+4      	; 0x160 <itoa+0xe>
 15c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__itoa_ncheck>
 160:	fb 01       	movw	r30, r22
 162:	10 82       	st	Z, r1
 164:	cb 01       	movw	r24, r22
 166:	08 95       	ret

00000168 <__itoa_ncheck>:
 168:	bb 27       	eor	r27, r27
 16a:	4a 30       	cpi	r20, 0x0A	; 10
 16c:	31 f4       	brne	.+12     	; 0x17a <__itoa_ncheck+0x12>
 16e:	99 23       	and	r25, r25
 170:	22 f4       	brpl	.+8      	; 0x17a <__itoa_ncheck+0x12>
 172:	bd e2       	ldi	r27, 0x2D	; 45
 174:	90 95       	com	r25
 176:	81 95       	neg	r24
 178:	9f 4f       	sbci	r25, 0xFF	; 255
 17a:	0c 94 c0 00 	jmp	0x180	; 0x180 <__utoa_common>

0000017e <__utoa_ncheck>:
 17e:	bb 27       	eor	r27, r27

00000180 <__utoa_common>:
 180:	fb 01       	movw	r30, r22
 182:	55 27       	eor	r21, r21
 184:	aa 27       	eor	r26, r26
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	aa 1f       	adc	r26, r26
 18c:	a4 17       	cp	r26, r20
 18e:	10 f0       	brcs	.+4      	; 0x194 <__utoa_common+0x14>
 190:	a4 1b       	sub	r26, r20
 192:	83 95       	inc	r24
 194:	50 51       	subi	r21, 0x10	; 16
 196:	b9 f7       	brne	.-18     	; 0x186 <__utoa_common+0x6>
 198:	a0 5d       	subi	r26, 0xD0	; 208
 19a:	aa 33       	cpi	r26, 0x3A	; 58
 19c:	08 f0       	brcs	.+2      	; 0x1a0 <__utoa_common+0x20>
 19e:	a9 5d       	subi	r26, 0xD9	; 217
 1a0:	a1 93       	st	Z+, r26
 1a2:	00 97       	sbiw	r24, 0x00	; 0
 1a4:	79 f7       	brne	.-34     	; 0x184 <__utoa_common+0x4>
 1a6:	b1 11       	cpse	r27, r1
 1a8:	b1 93       	st	Z+, r27
 1aa:	11 92       	st	Z+, r1
 1ac:	cb 01       	movw	r24, r22
 1ae:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <strrev>

000001b2 <strrev>:
 1b2:	dc 01       	movw	r26, r24
 1b4:	fc 01       	movw	r30, r24
 1b6:	67 2f       	mov	r22, r23
 1b8:	71 91       	ld	r23, Z+
 1ba:	77 23       	and	r23, r23
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <strrev+0x4>
 1be:	32 97       	sbiw	r30, 0x02	; 2
 1c0:	04 c0       	rjmp	.+8      	; 0x1ca <strrev+0x18>
 1c2:	7c 91       	ld	r23, X
 1c4:	6d 93       	st	X+, r22
 1c6:	70 83       	st	Z, r23
 1c8:	62 91       	ld	r22, -Z
 1ca:	ae 17       	cp	r26, r30
 1cc:	bf 07       	cpc	r27, r31
 1ce:	c8 f3       	brcs	.-14     	; 0x1c2 <strrev+0x10>
 1d0:	08 95       	ret

000001d2 <_exit>:
 1d2:	f8 94       	cli

000001d4 <__stop_program>:
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <__stop_program>
