
compile.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000721  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065f  00000000  00000000  0000091d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027a  00000000  00000000  00000f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000011f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c4  00000000  00000000  0000125c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000028  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001648  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 75 00 	call	0xea	; 0xea <main>
  78:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z8ADC_initv>:

// Initialize ADC
void ADC_init()
{
	// Set reference voltage and select ADC channel 0
	ADMUX |= (1 << REFS0) | (0b100 << MUX0);
  80:	ec e7       	ldi	r30, 0x7C	; 124
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	84 64       	ori	r24, 0x44	; 68
  88:	80 83       	st	Z, r24
	
	// Enable ADC
	ADCSRA |= (1 << ADEN);
  8a:	ea e7       	ldi	r30, 0x7A	; 122
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	80 68       	ori	r24, 0x80	; 128
  92:	80 83       	st	Z, r24
	
	// Disable high-speed mode (ADCSRB)
	ADCSRB = 0x00;
  94:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
  98:	08 95       	ret

0000009a <_Z8ADC_readv>:

// Read ADC value
uint16_t ADC_read()
{
	// Reset MUX channel selection
	ADMUX &= ~(0b1111 << MUX0);
  9a:	ec e7       	ldi	r30, 0x7C	; 124
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	80 7f       	andi	r24, 0xF0	; 240
  a2:	80 83       	st	Z, r24
	
	// Set MUX channel to 0
	ADMUX |= 0b0 << MUX0;
  a4:	80 81       	ld	r24, Z
  a6:	80 83       	st	Z, r24
	
	// Start the conversion
	ADCSRA |= (1 << ADSC);
  a8:	ea e7       	ldi	r30, 0x7A	; 122
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
	
	// Wait for the conversion to complete
	while (ADCSRA & (1 << ADSC))
  b2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b6:	86 fd       	sbrc	r24, 6
  b8:	fc cf       	rjmp	.-8      	; 0xb2 <_Z8ADC_readv+0x18>
	{
		// Wait here until ADSC bit is cleared
	}
	
	// Return the ADC value
	return ADC;
  ba:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  be:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  c2:	08 95       	ret

000000c4 <_Z5setupv>:

void setup()
{
	// Configure PORTD pins 2, 3, 4 as output (LEDs for debugging)
	DDRD |= 0b111 << 2;
  c4:	8a b1       	in	r24, 0x0a	; 10
  c6:	8c 61       	ori	r24, 0x1C	; 28
  c8:	8a b9       	out	0x0a, r24	; 10

	// Initialize ADC
	ADC_init();
  ca:	0e 94 40 00 	call	0x80	; 0x80 <_Z8ADC_initv>
  ce:	08 95       	ret

000000d0 <_Z4loopv>:
}

void loop()
{
	// Read the ADC value
	uint16_t adc_val = ADC_read();
  d0:	0e 94 4d 00 	call	0x9a	; 0x9a <_Z8ADC_readv>
	
	// You can toggle PORTD pins for debugging using LEDs
	if (adc_val > 512)
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	92 40       	sbci	r25, 0x02	; 2
  d8:	20 f0       	brcs	.+8      	; 0xe2 <_Z4loopv+0x12>
	{
		// Set PORTD pins if ADC value is greater than 512
		PORTD |= (1 << 2);  // Turn on PD2 LED
  da:	8b b1       	in	r24, 0x0b	; 11
  dc:	84 60       	ori	r24, 0x04	; 4
  de:	8b b9       	out	0x0b, r24	; 11
  e0:	08 95       	ret
	}
	else
	{
		// Clear PORTD pins if ADC value is less than 512
		PORTD &= ~(1 << 2); // Turn off PD2 LED
  e2:	8b b1       	in	r24, 0x0b	; 11
  e4:	8b 7f       	andi	r24, 0xFB	; 251
  e6:	8b b9       	out	0x0b, r24	; 11
  e8:	08 95       	ret

000000ea <main>:
}

int main(void)
{
	// Call setup function
	setup();
  ea:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z5setupv>
	
	// Main loop
	while (1)
	{
		loop();
  ee:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z4loopv>
  f2:	fd cf       	rjmp	.-6      	; 0xee <main+0x4>

000000f4 <_exit>:
  f4:	f8 94       	cli

000000f6 <__stop_program>:
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <__stop_program>
